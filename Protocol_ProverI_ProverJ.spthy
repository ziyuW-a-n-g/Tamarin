theory Provers_and_Provers 
begin

builtins: asymmetric-encryption, signing

/*
   Protocol between ProverI and ProverJ
 */
functions:
  
  hash/4,
  hash2/2,
  hash3/3   

// Public key infrastructure
rule Register_pk:
  [ Fr(~ltkA) ]
 --[Register($A, ~ltkA)]->
  [ !Ltk($A, ~ltkA), !Pk($A, pk(~ltkA)), Out(pk(~ltkA)) ]

rule Reveal_ltk:
  [ !Ltk(A, ltkA) ] --[ Revltk(A)  ]-> [ Out(ltkA) ]


rule Generate_shared_key:
      [Fr(~k),
      !Pk($ProverI, pkProverI),
      !Pk($ProverJ, pkProverJ)]
      --[Generatekey(pkProverI,pkProverJ,~k)]->
      [
      !Ltksys($ProverI,$ProverJ,pkProverI,pkProverJ,~k)
      ]

rule Reveal_k:
      [!Ltksys($ProverI,$ProverJ,pkProverI,pkProverJ,k)]
        --[Revk($ProverI,$ProverJ)]->
      [Out(k)]

rule ProverI_step1:
  let m1 = <~repi,~Ni,~pid,hash(~k,~repi,~Ni,~pid),sign(~Ni,ltk_ProverI)>
  in
    [ Fr(~Ni),
    Fr(~pid),
    Fr(~repi),
    !Ltk($ProverI, ltk_ProverI),
     !Ltksys($ProverI,$ProverJ,pkProverI,pkProverJ,~k)
    ]
  --[ 
      Step1(),
      Running($ProverI, $ProverJ, <'repi',~repi>),
      Running($ProverI, $ProverJ, <'pidi',~pid>)
    ]->
    [ Out( m1 ),
     St_ProverI_1($ProverI, $ProverJ, ~repi,~Ni,~pid)
    ]

rule ProverJ_step2:
  let m1 = <~repi,~Ni,~pid,hash(~k,~repi,~Ni,~pid),s2>
      Tj = hash2(~Ni,~Nj)
      m2 = <~repj,~Nj,hash(~k,~repj,Tj,~pid),sign(Tj,ltk_ProverJ)>
  in
    [ !Ltk($ProverJ, ltk_ProverJ),
     In( m1 ),
     !Ltksys($ProverI,$ProverJ,pkProverI,pkProverJ,~k),
     Fr(~repj),
    Fr(~Nj)
    ]
  --[ 
     Step2(),
    Eq(verify(s2,~Ni,pkProverI),true),
    Commit($ProverJ, $ProverI, <'repi',~repi>),
    Commit($ProverJ, $ProverI, <'pidi',~pid>),
    Running($ProverJ, $ProverI, <'Tj',Tj>),
    Running($ProverJ, $ProverI, <'pidj',~pid>),
    Running($ProverJ, $ProverI, <'repj',~repj>)
    ]->
    [ Out( m2 ),
    St_ProverJ_1($ProverI, $ProverJ, ~Ni, ~pid, ~Nj, ~repj)
    ]

rule ProverI_step3:
  let m2 = <~repj,Nj,hash(~k,~repj,hash2(~Ni,Nj),~pid),s3>
      Tj = hash2(~Ni,Nj)
      Ti = hash3(~k,~Ni,Nj)
  in
    [St_ProverI_1($ProverI, $ProverJ, ~repi,~Ni,~pid),
     In( m2 ),
    !Ltksys($ProverI,$ProverJ,pkProverI,pkProverJ,~k)
    ]
  --[ Step3(),
      Eq(verify(s3,Tj,pkProverJ),true),
     Commit ($ProverI, $ProverJ, <'Tj',Tj>),
     Commit($ProverI, $ProverJ, <'pidj',~pid>),
     Commit ($ProverI, $ProverJ, <'repj',~repj>),
      Running($ProverI, $ProverJ, <'Ti',Ti>)  
    ]->
    [Out(Ti)]

rule ProverJ_Step4:
  let 
      Ti = hash3(~k,~Ni,~Nj)
  in
    [St_ProverJ_1($ProverI, $ProverJ, ~Ni, ~pid, ~Nj, ~repj),
    !Ltksys($ProverI,$ProverJ,pkProverI,pkProverJ,~k),
     In( Ti)
    ]
  --[ Step4(),
     Commit ($ProverJ, $ProverI, <'Ti',Ti>)  
    ]->
    []

restriction Equality:
"All x y #i. Eq(x,y) @i ==> x = y"

restriction register_once:
  " All ltk1 ltk2 A #i #j. Register(A, ltk1)@i & Register(A, ltk2)@j ==> (#i = #j & ltk1 = ltk2)"

restriction Generatekey_two_different_party:
  " All pkProverI pkProverJ k #i. Generatekey(pkProverI,pkProverJ,k)@i  ==> not (pkProverI = pkProverJ)"
restriction Generatekey_once:
  " All pkProverI pkProverJ k1 k2 #i #j. Generatekey(pkProverI,pkProverJ,k1)@i  & Generatekey(pkProverI,pkProverJ,k2)@j==> (#i = #j & k1 = k2)"

lemma executability:
  exists-trace
  " Ex   #i #j #k #m. Step4()@m 
  & Step3()@i 
  & Step2()@j 
  & Step1()@k
    & #k < #j  
    & #j < #i 
    & #i < #m
    & not (Ex X  #r. Revltk(X)@r)
    & not (Ex ProverI ProverJ  #r. Revk(ProverI,ProverJ)@r)
    "
lemma Aliveness_ProverI_ProverJ:
  " 
    All ProverI ProverJ Tj  #i.
        Commit(ProverI, ProverJ, <'Tj',Tj>) @ i
      ==>
          (Ex Proverk t #j. Running(ProverJ, Proverk, <'Tj',t>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverJ)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "

  lemma Weak_agree_ProverI_ProverJ:
  " 
    All ProverI ProverJ Tj  #i.
        Commit(ProverI, ProverJ, <'Tj',Tj>) @ i
      ==>
          (Ex t #j. Running(ProverJ, ProverI, <'Tj',t>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverJ)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "
  lemma Noninjective_agree_Tj_ProverI_ProverJ:
  " 
    All ProverI ProverJ Tj  #i.
        Commit(ProverI, ProverJ, <'Tj',Tj>) @ i
      ==>
          (Ex #j. Running(ProverJ, ProverI, <'Tj',Tj>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverJ)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "

lemma Noninjective_agree_repj_ProverI_ProverJ:
  " 
    All ProverI ProverJ repj #i.
        Commit(ProverI, ProverJ, <'repj', repj>) @ i
      ==>
          (Ex #j. Running(ProverJ, ProverI, <'repj', repj>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverJ)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "

lemma Noninjective_agree_pidj_ProverI_ProverJ:
  "
    All ProverI ProverJ  pid  #i.
        Commit(ProverI, ProverJ, <'pidj',pid>) @ i
      ==>
          (Ex #j. Running(ProverJ, ProverI, <'pidj',pid>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverJ)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "
lemma Injective_agree_Tj_ProverI_ProverJ:
  " 
    All ProverI ProverJ Tj  #i.
        Commit(ProverI, ProverJ, <'Tj',Tj>) @ i
      ==>
          (Ex #j. Running(ProverJ, ProverI, <'Tj',Tj>) @ j & j < i
          & not (Ex ProverI2 ProverJ2 #i2. Commit(ProverI2,ProverJ2,<'Tj', Tj>)@i2
                            & not (#i2 = #i))
          )
        | (Ex #r. Revltk(ProverJ)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "
lemma Aliveness_ProverJ_ProverI:
  "
    All ProverI ProverJ repi #i.
        Commit(ProverJ, ProverI, <'repi',repi>) @ i
      ==>
          (Ex Proverk t #j. Running(ProverI, Proverk, <'repi',t>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverI)  @ r)
        | (Ex #r. Revk(ProverI, ProverJ)  @ r)
  "
lemma Weak_agree_ProverJ_ProverI:
  "
    All ProverI ProverJ repi  #i.
        Commit(ProverJ, ProverI, <'repi',repi>) @ i
      ==>
          (Ex t #j. Running(ProverI, ProverJ, <'repi',t>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverI)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "

lemma Noninjective_agree_Ti_ProverJ_ProverI:
  "
    All ProverI ProverJ Ti  #i.
        Commit(ProverJ, ProverI, <'Ti',Ti>) @ i
      ==>
          (Ex #j. Running(ProverI, ProverJ, <'Ti',Ti>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverI)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "


lemma Noninjective_agree_repi_ProverJ_ProverI:
  "
    All ProverI ProverJ repi  #i.
        Commit(ProverJ, ProverI, <'repi',repi>) @ i
      ==>
          (Ex #j. Running(ProverI, ProverJ, <'repi',repi>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverI)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "

lemma Noninjective_agree_pidi_ProverJ_ProverI:
  "
    All ProverI ProverJ  pid  #i.
        Commit(ProverJ, ProverI, <'pidi',pid>) @ i
      ==>
          (Ex #j. Running(ProverI, ProverJ, <'pidi',pid>) @ j & j < i
          )
        | (Ex #r. Revltk(ProverI)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "

lemma Injective_agree_Ti_ProverJ_ProverI:
  "
    All ProverI ProverJ Ti  #i.
        Commit(ProverJ, ProverI, <'Ti',Ti>) @ i
      ==>
          (Ex #j. Running(ProverI, ProverJ, <'Ti',Ti>) @ j & j < i
           & not (Ex ProverI2 ProverJ2 #i2. Commit(ProverJ2,ProverI2,<'Ti', Ti>)@i2
                            & not (#i2 = #i))
          )
        | (Ex #r. Revltk(ProverI)  @ r)
        |(Ex #r. Revk(ProverI, ProverJ)  @ r)
  "




end
